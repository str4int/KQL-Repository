//Query to see PIM activation & expiration - last 24h
AuditLogs
| where TimeGenerated >= ago(24h)
| where LoggedByService == "PIM"
| extend ActivationAccount = tostring(InitiatedBy.["user"].["userPrincipalName"])
| extend askedRessource = tostring(TargetResources.[0].["displayName"])
| extend removedPIMaccess = tostring(TargetResources.[3].["userPrincipalName"])
| distinct TimeGenerated, ActivationAccount, askedRessource, ResultDescription, removedPIMaccess, OperationName, Result



// Query to see ONLY PIM request
AuditLogs
| where TimeGenerated >= ago(24h)
| where LoggedByService == "PIM"
| where OperationName contains "Add member"// OperationName contains "Remove member"
| extend ActivationAccount = tostring(InitiatedBy.["user"].["userPrincipalName"])
| extend askedRessource = tostring(TargetResources.[0].["displayName"])
| distinct TimeGenerated, ActivationAccount, askedRessource, ResultDescription, Result



// Query to see ONLY PIM expired session
AuditLogs
| where TimeGenerated >= ago(24h)
| where LoggedByService == "PIM"
| where OperationName contains "Remove member"
| extend removedPIMaccess = tostring(TargetResources.[3].["userPrincipalName"])
| extend askedRessource = tostring(TargetResources.[0].["displayName"])
| distinct TimeGenerated, removedPIMaccess, askedRessource, Result


// Query to check any change/update on user's passwords
AuditLogs
| where TimeGenerated >= ago(24h)
| where OperationName contains "password"
| extend ActivationAccount = tostring(InitiatedBy.["user"].["userPrincipalName"])
| extend TargetDone = tostring(TargetResources.[0].["userPrincipalName"])
| project TimeGenerated, ActivationAccount, ResultDescription, OperationName, TargetDone, Result, AADOperationType


// new MFA registration
AuditLogs
| where TimeGenerated >= ago(24h)
| where OperationName contains "User started security info registration"
| extend userinvolved = tostring(TargetResources.[0].["userPrincipalName"])
| extend username = tostring(TargetResources.[0].["displayName"])
| extend fromIP = tostring(InitiatedBy.["user"].["ipAddress"])
| project TimeGenerated, username, userinvolved, ResultDescription, Result, fromIP


// Priviledge Role Assignment - MS Query
// The query_now parameter represents the time (in UTC) at which the scheduled analytics rule ran to produce this alert.
set query_now = datetime(2025-09-16T12:00:00.0000000Z);
// Define the start and end times based on input values
let starttime = now()-1h;
let endtime = now();
// Set a lookback period of 14 days
let lookback = starttime - 14d;
// Define a reusable function to query audit logs
let awsFunc = (start:datetime, end:datetime) {
AuditLogs
| where TimeGenerated between (start..end)
| where Category =~ "RoleManagement"
| where AADOperationType in ("Assign", "AssignEligibleRole")
| where ActivityDisplayName has_any ("Add eligible member to role", "Add member to role")
| mv-apply TargetResource = TargetResources on
(
where TargetResource.type in~ ("User", "ServicePrincipal")
| extend Target = iff(TargetResource.type =~ "ServicePrincipal", tostring(TargetResource.displayName), tostring(TargetResource.userPrincipalName)),
props = TargetResource.modifiedProperties
)
| mv-apply Property = props on
(
where Property.displayName =~ "Role.DisplayName"
| extend RoleName = trim('"', tostring(Property.newValue))
)
| where RoleName contains "Admin" and Result == "success"
};
// Query for audit events in the current day
let EventInfo_CurrentDay = awsFunc(starttime, endtime);
// Query for audit events in the historical period (lookback)
let EventInfo_historical = awsFunc(lookback, starttime);
// Find unseen events by performing a left anti-join
let EventInfo_Unseen = (EventInfo_CurrentDay
| join kind=leftanti(EventInfo_historical) on Target, RoleName, OperationName
);
// Extend and clean up the results
EventInfo_Unseen
| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)
| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)
| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)
| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)
| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))
| extend Initiator = iif(isnotempty(InitiatingAppName), InitiatingAppName, InitiatingUserPrincipalName)
// You can uncomment the lines below to filter out PIM activations
// | where Initiator != "MS-PIM"
// | summarize StartTime=min(TimeGenerated), EndTime=min(TimeGenerated) by OperationName, RoleName, Target, Initiator, Result
// Project specific columns and split them for further analysis
| project TimeGenerated, OperationName, RoleName, Target, Initiator, InitiatingUserPrincipalName, InitiatingAadUserId, InitiatingAppName, InitiatingAppServicePrincipalId, InitiatingIpAddress, Result
| extend TargetName = tostring(split(Target,'@',0)[0]), TargetUPNSuffix = tostring(split(Target,'@',1)[0]), InitiatorName = tostring(split(InitiatingUserPrincipalName,'@',0)[0]), InitiatorUPNSuffix = tostring(split(InitiatingUserPrincipalName,'@',1)[0])
